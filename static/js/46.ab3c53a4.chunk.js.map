{"version":3,"file":"static/js/46.ab3c53a4.chunk.js","mappings":"sQAGaA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,uW,mBCAJD,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,0MAYJE,EAAkBF,EAAAA,GAAAA,QAAH,yEAIfG,EAAiBH,EAAAA,GAAAA,QAAH,yFAKdI,EAAaJ,EAAAA,GAAAA,GAAH,6CAGVK,EAAUL,EAAAA,GAAAA,GAAH,6C,SCXdM,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAEfC,EAMED,EANFC,eACAC,EAKEF,EALFE,WACAC,EAIEH,EAJFG,SACAC,EAGEJ,EAHFI,OACAC,EAEEL,EAFFK,YACAC,EACEN,EADFM,aAEF,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OALAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAcC,EAAAA,EAAAA,IAAaP,EAAD,WAlBlB,MAmBdI,EAAWE,EACZ,GAAE,CAACN,KAGF,iCACE,UAACV,EAAD,YACE,gBACEkB,IAAKL,EACLM,IAAG,UAAKb,EAAL,YACHc,MAAK,UA5BG,QA+BV,UAAClB,EAAD,YACE,2BACE,0BACGI,EADH,KAnBK,IAAIe,KAAKV,GAAcW,eACrB,YAkBP,QAGA,wCAAgBf,SAElB,2BACE,sCACA,uBAAIC,OAELC,IACC,2BACE,oCACA,uBACGA,EAAOc,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACb,MAAM,IAAN,OAAWA,EAAX,KACD,gBAMX,UAACvB,EAAD,YACE,mDACA,UAACE,EAAD,YACE,yBACE,SAAC,EAAD,CAAMsB,GAAG,OAAT,qBAEF,yBACE,SAAC,EAAD,CAAMA,GAAG,UAAT,+BAMX,EACDrB,EAAQsB,UAAY,CAClBrB,SAAUsB,IAAAA,MAAe,CACvBrB,eAAgBqB,IAAAA,OAAAA,WAChBpB,WAAYoB,IAAAA,OAAAA,WACZnB,SAAUmB,IAAAA,OAAAA,WACVlB,OAAQkB,IAAAA,MAAe,CACrBH,KAAMG,IAAAA,OAAAA,aAERjB,YAAaiB,IAAAA,OAAAA,WACbhB,aAAcgB,IAAAA,OAAAA,cAIlB,QClEA,EAvBqB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACdC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCjB,EAAAA,EAAAA,UAAS,MAAzC,eAAOP,EAAP,KAAiB0B,EAAjB,KAYA,OAVAhB,EAAAA,EAAAA,YAAU,WACR,IAAMiB,GAAQC,EAAAA,EAAAA,IAAe,QAAD,UAAaJ,IACrCG,GACFA,EAAME,MAAK,SAAAC,GACJA,GACLJ,EAAYI,EAAMC,KACnB,GAEJ,GAAE,CAACP,KAGF,6BACE,SAAChC,EAAD,CAAM4B,GAAIG,EAAV,0BACCvB,IAAY,SAAC,EAAD,CAASA,SAAUA,KAChC,SAAC,KAAD,MAGL,C","sources":["pages/MovieDetails/MovieDetail.styled.js","components/MainInf/MoviesList.styled.js","components/MainInf/MoviesList.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n  display: block;\n  width: 100px;\n  text-align: center;\n  padding: 8px 16px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  text-decoration: none;\n  color: blue;\n  font-weight: 500;\n  border: 1px solid black;\n  border-radius: 5px;\n  font-size: 32px;\n  opacity: 0.9;\n  &.active,\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Link = styled(NavLink)`\n  //   padding: 20px;\n  font-size: 18px;\n  font-weight: 500;\n  //   text-decoration: none;\n  color: #2a363b;\n  &.active,\n  &:hover,\n  &:focus {\n    color: #2196f3;\n  }\n`;\nexport const SectionMainInfo = styled.section`\n  display: flex;\n  border-top: 1px solid grey;\n`;\nexport const SectionAddInfo = styled.section`\n  border-top: 1px solid grey;\n  border-bottom: 1px solid grey;\n`;\n\nexport const MoviesList = styled.ul`\n  list-style: none;\n`;\nexport const AddList = styled.ul`\n  list-style: none;\n`;","\nimport PropType from 'prop-types';\nimport { useState, useEffect } from 'react';\n\nimport {\n  Link,\n  SectionMainInfo,\n  SectionAddInfo,\n  MoviesList,\n  AddList,\n} from './MoviesList.styled';\n\nimport { tmdbImageAPI } from 'api/tmdbAPI';\n\nconst WIDTH_IMG = 300;\n\nconst MainInf = ({ movieObj }) => {\n  const {\n    original_title,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n    release_date,\n  } = movieObj;\n  const [imgLink, setImgLink] = useState();\n\n  const getYear = () => {\n    const date = new Date(release_date).getFullYear();\n    return date || 'not found';\n  };\n  useEffect(() => {\n    const fullImgLink = tmdbImageAPI(poster_path, `w${WIDTH_IMG}`);\n    setImgLink(fullImgLink);\n  }, [poster_path]);\n\n  return (\n    <>\n      <SectionMainInfo>\n        <img\n          src={imgLink}\n          alt={`${original_title}'s title`}\n          width={`${WIDTH_IMG}`}\n        />\n\n        <MoviesList>\n          <li>\n            <h2>\n              {original_title} ({getYear()})\n            </h2>\n            <p>Popularity: {popularity}</p>\n          </li>\n          <li>\n            <h3>Overview</h3>\n            <p>{overview}</p>\n          </li>\n          {genres && (\n            <li>\n              <h3>Genres</h3>\n              <p>\n                {genres.map(({ name }) => {\n                  return `[${name}] `;\n                })}\n              </p>\n            </li>\n          )}\n        </MoviesList>\n      </SectionMainInfo>\n      <SectionAddInfo>\n        <p>Additional information</p>\n        <AddList>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </AddList>\n      </SectionAddInfo>\n    </>\n  );\n};\nMainInf.protoType = {\n  movieObj: PropType.shape({\n    original_title: PropType.string.isRequired,\n    popularity: PropType.number.isRequired,\n    overview: PropType.string.isRequired,\n    genres: PropType.shape({\n      name: PropType.string.isRequired,\n    }),\n    poster_path: PropType.string.isRequired,\n    release_date: PropType.string.isRequired,\n  }),\n};\n\nexport default MainInf;","import { useState, useEffect } from 'react';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { tmdbMovieIdAPI } from 'api/tmdbAPI';\nimport { Link } from './MovieDetail.styled';\nimport MainInf from 'components/MainInf/MoviesList.jsx';\n\nconst MovieDetails = ({ history }) => {\n  const { movieId } = useParams();\n  const [movieObj, setMovieObj] = useState(null);\n\n  useEffect(() => {\n    const movie = tmdbMovieIdAPI('movie', `${movieId}`);\n    if (movie) {\n      movie.then(value => {\n        if (!value) return;\n        setMovieObj(value.data);\n      });\n    }\n  }, [movieId]);\n\n  return (\n    <main>\n      <Link to={history}>ðŸ”™</Link>\n      {movieObj && <MainInf movieObj={movieObj} />}\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;"],"names":["Link","styled","NavLink","SectionMainInfo","SectionAddInfo","MoviesList","AddList","MainInf","movieObj","original_title","popularity","overview","genres","poster_path","release_date","useState","imgLink","setImgLink","useEffect","fullImgLink","tmdbImageAPI","src","alt","width","Date","getFullYear","map","name","to","protoType","PropType","history","movieId","useParams","setMovieObj","movie","tmdbMovieIdAPI","then","value","data"],"sourceRoot":""}