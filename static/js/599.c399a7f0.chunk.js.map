{"version":3,"file":"static/js/599.c399a7f0.chunk.js","mappings":"mNAEaA,E,QAAOC,GAAAA,GAAH,4N,SCCXC,EAAW,SAAC,GAAmC,IAAD,IAAhCC,KAAQC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACpC,OACE,+BACE,SAACN,EAAD,WACE,SAAC,KAAD,CAAMO,GAAE,kBAAaH,GAArB,SAA4BC,GAAQC,OAI3C,EAEDJ,EAASM,UAAY,CACnBL,KAAMM,IAAAA,MAAe,CACnBL,GAAIK,IAAAA,OAAAA,WACJJ,KAAMI,IAAAA,OAAAA,WACNH,MAAOG,IAAAA,OAAAA,cAIX,O,sKCTaC,GAVOT,EAAAA,GAAAA,KAAH,iLAUSA,EAAAA,GAAAA,OAAH,4NAcVU,EAAYV,EAAAA,GAAAA,MAAH,oJ,SCpBhBW,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAcA,OACE,kBAAMH,SAdW,SAAAI,GACjBA,EAAEC,iBACuB,KAArBH,EAAUI,OAIdN,EAASE,GAHPK,EAAAA,OAAAA,QAAe,mBAIlB,EAOC,WACE,SAACT,EAAD,CACEU,KAAK,OACLhB,KAAK,YACLiB,MAAOP,EACPQ,SAXkB,SAAAN,GACtB,IAAQK,EAAUL,EAAEO,cAAZF,MACRN,EAAaM,EACd,EASKG,aAAa,MACbC,WAAS,EACTC,YAAY,kBACX,KACH,SAACjB,EAAD,CAAYW,KAAK,SAAjB,sBAGL,EACDT,EAAUgB,UAAY,CACpBf,SAAUJ,IAAAA,KAAAA,WACVoB,QAASpB,IAAAA,KAAAA,YAGX,Q,oBC/BMqB,EAAS,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAChB,GAAkCjB,EAAAA,EAAAA,WAAS,iBAAM,EAAN,IAA3C,eAAOkB,EAAP,KAAkBC,EAAlB,KACA,GAA4BnB,EAAAA,EAAAA,UAAS,MAArC,eAAOoB,EAAP,KAAeC,EAAf,KAEA,GAA4CrB,EAAAA,EAAAA,WAAS,iBAAM,EAAN,IAArD,eAAOsB,EAAP,KAAuBC,EAAvB,KACA,GAAwCC,EAAAA,EAAAA,KAAgB,iBAAM,EAAN,IAAxD,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAElBC,EAAAA,EAAAA,YAAU,YACRP,EAAkBE,EAAaM,IAAI,UACnCZ,EAAaD,GAAaI,GAErBJ,MAEgBc,EAAAA,EAAAA,IACnB,eACA,EACAd,GAAaI,GAEFW,MAAK,SAAAzB,GAChBa,EAAUb,EAAM0B,SAChBR,EAAgB,CAAES,MAAOjB,GAAa,CAAEkB,SAAS,GAClD,IAEDC,QAAQC,MACT,GAAE,CAACpB,EAAWO,EAAcC,EAAiBJ,KAE9CQ,EAAAA,EAAAA,YAAU,WACRL,GAAgBR,EAAWW,EAAWC,EACvC,GAAE,CAACJ,EAAcR,EAAYW,EAAUC,IAMxC,OACE,6BACE,SAAC,EAAD,CAAW9B,SANQ,SAAAwC,GACrBpB,EAAaoB,EACd,IAKInB,IACC,wBACGA,EAAOoB,KAAI,SAAAC,GAAI,OACd,SAACrD,EAAA,EAAD,CAAUE,GAAImD,EAAKnD,GAAID,KAAMoD,GAAWA,EAAKnD,GAD/B,QAOzB,EAED0B,EAAOF,UAAY,CACjB4B,IAAK/C,IAAAA,MAAAA,WACLsB,WAAYtB,IAAAA,KAAAA,YAGd,O","sources":["components/MoviesList/ListItem.styled.js","components/MoviesList/ListItem.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.li`\n  list-style: decimal-leading-zero;\n  > a {\n  font-size: 20px;\n  font-weight: 500;\n  text-decoration: none;\n  color: #2a363b;\n  &.active,\n  &:hover,\n  &:focus {\n    color: #2196f3;\n  }\n`;","import PropType from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { List } from './ListItem.styled';\nconst ListItem = ({ film: { id, name, title } }) => {\n  return (\n    <>\n      <List>\n        <Link to={`/movies/${id}`}>{name || title}</Link>\n      </List>\n    </>\n  );\n};\n\nListItem.prototype = {\n  film: PropType.shape({\n    id: PropType.number.isRequired,\n    name: PropType.string.isRequired,\n    title: PropType.string.isRequired,\n  }),\n};\n\nexport default ListItem;","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  // align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const FormButton = styled.button`\n  width: 70px;\n  height: 30px;\n  border-radius: 5px;\n  background-color: #dbd9d0;\n  &:hover,\n  &:focus {\n    background-color: #bfbebb;\n  }\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;\nexport const FormInput = styled.input`\n  width: 300px;\n  height: 30px;\n  margin-right: 10px;\n  margin-bottom: 10px;\n  padding: 0 10px;\n  border-radius: 5px;\n`;","\nimport PropType from 'prop-types';\nimport { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { FormButton, FormInput } from 'components/Searchbar/Searchbar.styled';\n\nconst Searchbar = ({ onSubmit }) => {\n  const [searchStr, setSearchStr] = useState('');\n  const exportData = e => {\n    e.preventDefault();\n    if (searchStr.trim() === '') {\n      Notify.failure('Enter some value');\n      return;\n    }\n    onSubmit(searchStr);\n  };\n  const updateCurrState = e => {\n    const { value } = e.currentTarget;\n    setSearchStr(value);\n  };\n\n  return (\n    <form onSubmit={exportData}>\n      <FormInput\n        type=\"text\"\n        name=\"searchStr\"\n        value={searchStr}\n        onChange={updateCurrState}\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n      />{' '}\n      <FormButton type=\"submit\">Search</FormButton>\n    </form>\n  );\n};\nSearchbar.protoType = {\n  onSubmit: PropType.func.isRequired,\n  onClick: PropType.func.isRequired,\n};\n\nexport default Searchbar;","//React\nimport PropType from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nimport Searchbar from 'components/Searchbar/Searchbar.jsx';\nimport ListItem from 'components/MoviesList/ListItem.jsx';\n\nimport { tmdbMovieAPI } from 'api/tmdbAPI';\n\nconst Movies = ({ setHistory }) => {\n  const [searchVal, setSearchVal] = useState(() => '');\n  const [movArr, setMovArr] = useState(null);\n\n  const [searchUrlQuery, setSearchUrlQuery] = useState(() => '');\n  const [searchParams, setSearchParams] = useSearchParams(() => '');\n\n  const { pathname, search } = useLocation();\n\n  useEffect(() => {\n    setSearchUrlQuery(searchParams.get('query'));\n    setSearchVal(searchVal || searchUrlQuery);\n\n    if (!searchVal) return;\n\n    const searchByName = tmdbMovieAPI(\n      'search/movie',\n      1,\n      searchVal || searchUrlQuery\n    );\n    searchByName.then(value => {\n      setMovArr(value.movData);\n      setSearchParams({ query: searchVal }, { replace: true });\n    });\n\n    console.log();\n  }, [searchVal, searchParams, setSearchParams, searchUrlQuery]);\n\n  useEffect(() => {\n    searchParams && setHistory(pathname + search);\n  }, [searchParams, setHistory, pathname, search]);\n\n  const getDataExtForm = data => {\n    setSearchVal(data);\n  };\n\n  return (\n    <main>\n      <Searchbar onSubmit={getDataExtForm} />\n      {movArr && (\n        <ul>\n          {movArr.map(item => (\n            <ListItem id={item.id} film={item} key={item.id} />\n          ))}\n        </ul>\n      )}\n    </main>\n  );\n};\n\nMovies.protoType = {\n  arr: PropType.array.isRequired,\n  setHistory: PropType.func.isRequired,\n};\n\nexport default Movies;"],"names":["List","styled","ListItem","film","id","name","title","to","prototype","PropType","FormButton","FormInput","Searchbar","onSubmit","useState","searchStr","setSearchStr","e","preventDefault","trim","Notify","type","value","onChange","currentTarget","autoComplete","autoFocus","placeholder","protoType","onClick","Movies","setHistory","searchVal","setSearchVal","movArr","setMovArr","searchUrlQuery","setSearchUrlQuery","useSearchParams","searchParams","setSearchParams","useLocation","pathname","search","useEffect","get","tmdbMovieAPI","then","movData","query","replace","console","log","data","map","item","arr"],"sourceRoot":""}